{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"cach",
				"cachedir"
			],
			[
				"hidden",
				"hidden_boards"
			],
			[
				"ca",
				"categories"
			],
			[
				"this",
				"this_category"
			],
			[
				"igno",
				"ignored_category"
			],
			[
				"ignore",
				"ignoreThisBoard"
			],
			[
				"ignored",
				"ignored_category"
			],
			[
				"ig",
				"ignoreThisBoard"
			],
			[
				"news",
				"news_item"
			],
			[
				"URL",
				"URL_FORMAT"
			],
			[
				"t",
				"true"
			],
			[
				"tr",
				"true"
			],
			[
				"back",
				"background	background-color: hex"
			],
			[
				"font-",
				"font-weight"
			],
			[
				"all",
				"allcookies"
			],
			[
				"call",
				"callHook"
			],
			[
				"preg_ma",
				"preg_match_all"
			],
			[
				"user",
				"user_info"
			],
			[
				"profile_er",
				"profile_error_signature_disabled_bbc"
			],
			[
				"contex",
				"context"
			],
			[
				"key",
				"keypad_plus"
			],
			[
				"context",
				"memberContext"
			]
		]
	},
	"buffers":
	[
		{
			"file": "index.php",
			"settings":
			{
				"buffer_size": 13834,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/Users/alex/Dropbox/sublime/Data/Packages/User/Preferences.sublime-settings",
			"settings":
			{
				"buffer_size": 235,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Sources/Load.php",
			"settings":
			{
				"buffer_size": 110702,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Sources/lib/Subs.php",
			"settings":
			{
				"buffer_size": 152574,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "<?php\n/**\n * @name      EosAlpha BBS\n * @copyright 2011 Alex Vie silvercircle(AT)gmail(DOT)com\n *\n * This software is a derived product, based on:\n *\n * Simple Machines Forum (SMF)\n * copyright:	2011 Simple Machines (http://www.simplemachines.org)\n * license:  	BSD, See included LICENSE.TXT for terms and conditions.\n *\n * @version 1.0pre\n *\n * this is what once was in $smcFunc[], a bit simplified for utf-8 only and entity check\n * always enforced.\n *\n * it also implements the Hook and Cache APIs.\n */\nif (!defined('SMF'))\n	die('No access');\n\nclass commonAPI {\n\n	private static $ent_list = '&(#\\d{1,7}|quot|amp|lt|gt|nbsp);';\n	private static $space_chars = '\\x{A0}\\x{AD}\\x{2000}-\\x{200F}\\x{201F}\\x{202F}\\x{3000}\\x{FEFF}';\n\n	private static function ent_check($string)\n	{\n		return(preg_replace('~(&#(\\d{1,7}|x[0-9a-fA-F]{1,6});)~e', self::entity_fix($string), $string));\n	}\n\n	public static function entity_fix($string)\n	{\n		$num = substr($string, 0, 1) === 'x' ? hexdec(substr($string, 1)) : (int) $string;\n		return $num < 0x20 || $num > 0x10FFFF || ($num >= 0xD800 && $num <= 0xDFFF) || $num === 0x202E || $num === 0x202D ? '' : '&#' . $num . ';';\n	}\n\n	public static function ucwords($string)\n	{\n		$words = preg_split('~([\\s\\r\\n\\t]+)~', $string, -1, PREG_SPLIT_DELIM_CAPTURE);\n		for ($i = 0, $n = count($words); $i < $n; $i += 2)\n			$words[$i] = self::ucfirst($words[$i]);\n\n		return implode('', $words);\n	}\n\n	public static function ucfirst($string)\n	{\n		return self::strtoupper(self::substr($string, 0, 1)) . self::substr($string, 1);\n	}\n\n	public static function substr($string, $start, $length = 0)\n	{\n		$ent_arr = preg_split('~(&#' . ('\\d{1,7}') . ';|&quot;|&amp;|&lt;|&gt;|&nbsp;|.)~u', self::ent_check($string), -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);\n		return $length == 0 ? implode('', array_slice($ent_arr, $start)) : implode('', array_slice($ent_arr, $start, $length));\n	}\n\n	public static function strtolower($string)\n	{\n		global $sourcedir;\n\n		if(function_exists('mb_strtolower'))\n			return mb_strtolower($string, 'UTF-8');\n\n		require_once($sourcedir . '/lib/Subs-Charset.php');\n		return utf8_strtolower($string);\n	}\n\n	public static function strtoupper($string)\n	{\n		global $sourcedir;\n\n		if(function_exists('mb_strtoupper'))\n			return mb_strtoupper($string, 'UTF-8');\n\n		require_once($sourcedir . '/lib/Subs-Charset.php');\n		return utf8_strtoupper($string);\n	}\n\n	public static function truncate($string, $length)\n	{\n		$string = self::ent_check($string);\n		$matches = array();\n		\n		preg_match('~^(' . self::$ent_list . '|.){' . self::strlen(substr($string, 0, $length)) . '}~u', $string, $matches);\n		$string = $matches[0];\n		while (strlen($string) > $length)\n			$string = preg_replace('~(?:' . self::$ent_list . '|.)$~u', '', $string);\n		return $string;\n	}\n\n	public static function strlen($string)\n	{\n		return strlen(preg_replace('~' . self::$ent_list . '|.~u', '_', self::ent_check($string)));\n	}\n\n	public static function htmltrim($string)\n	{\n		return preg_replace('~^(?:[ \\t\\n\\r\\x0B\\x00' . self::$space_chars . ']|&nbsp;)+|(?:[ \\t\\n\\r\\x0B\\x00' . self::$space_chars . ']|&nbsp;)+$~u', '', self::ent_check($string));\n	}\n\n	public static function htmlspecialchars($string, $quote_style = ENT_COMPAT)\n	{\n		return preg_replace(strtr('~(&#(\\d{1,7}|x[0-9a-fA-F]{1,6});)~e', array('&' => '&amp;')), self::entity_fix($string), htmlspecialchars($string, $quote_style, 'UTF-8'));\n	}\n\n	public static function strpos($haystack, $needle, $offset = 0)\n	{\n		$haystack_arr = preg_split('~(&#\\d{1,7}' . ';|&quot;|&amp;|&lt;|&gt;|&nbsp;|.)~u', self::ent_check($haystack), -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);\n		//$haystack_size = count($haystack_arr);\n		if (strlen($needle) === 1)\n		{\n			$result = array_search($needle, array_slice($haystack_arr, $offset));\n			return is_int($result) ? $result + $offset : false;\n		}\n		else\n		{\n			$needle_arr = preg_split('~(&#\\d{1,7}' . ';|&quot;|&amp;|&lt;|&gt;|&nbsp;|.)~u',  self::ent_check($needle), -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);\n			$needle_size = count($needle_arr);\n\n			$result = array_search($needle_arr[0], array_slice($haystack_arr, $offset));\n			while (is_int($result))\n			{\n				$offset += $result;\n				if (array_slice($haystack_arr, $offset, $needle_size) === $needle_arr)\n					return $offset;\n				$result = array_search($needle_arr[0], array_slice($haystack_arr, ++$offset));\n			}\n			return false;\n		}\n	}\n\n	public static function getMessagesPerPage()\n	{\n		global $modSettings, $options;\n\n		return(empty($modSettings['disableCustomPerPage']) && !empty($options['messages_per_page']) ? $options['messages_per_page'] : $modSettings['defaultMaxMessages']);\n	}\n}\n\n/**\n * implements the new hook API\n *\n * all hooks are now stored in a single array. each top level array element defines a single\n * hook identified by its name.\n */\nclass HookAPI {\n	private static $hooks = array();\n	private static $addonsdir;\n\n	/**\n	 * @param $the_hooks	string - serialized array of hooks\n	 *\n	 * initialize the hooks\n	 * this must be called immediately after loading modSettings[] from the database\n	 * \n	 * also: sets the addons base directory. It must exist, be writeable and be a directory.\n	 * If any check fails, it falls back to the default hardcoded sub-folder ($boarddir/addons).\n	 */\n	public static function setHooks(&$the_hooks)\n	{\n		global $boarddir;\n		\n		self::$hooks = @unserialize($the_hooks);\n		if(isset($GLOBALS['addonsdir']) && !empty($GLOBALS['addonsdir']) && file_exists($GLOBALS['addonsdir']) && is_dir($GLOBALS['addonsdir']))\n			self::$addonsdir = rtrim($GLOBALS['addonsdir'], '/\\\\ ') . '/';\n		else\n			self::$addonsdir = $boarddir . 'addons/';\n\n	}\n\n	/**\n	 *\n	 * @param type $hook     string - the name of the hook\n	 * @param type $product  string - a product name. This also defines the sub-folder in which the files of the addons must be\n	 * @param string $file   string - the file to include\n	 * @param type $function string - a function name to call\n	 * @return type			 bool   - true if all ok, false if the file or function could not be found.\n	 * \n	 * this function is typicalle called from the install procedure of an addon. It adds one file/function\n	 * to a named hook.\n	 */\n	public static function addHook($hook, $product, $file, $function)\n	{\n		$ref = array('p' => $product, 'f' => $file, 'c' => $function);\n\n		if(isset(self::$hooks[$hook]) && is_array(self::$hooks[$hook])) {\n			foreach(self::$hooks[$hook] as $current_hook) {\n				if($current_hook == $ref) {\n					log_error(sprintf('HookAPI: duplicate hook installation detected in hook %s (product: %s, function: %s, file: %s', $hook, $ref['p'], $ref['c'], $ref['f']));\n					return;\n				}\n			}\n		}\n		// check the hook for validity\n		$file = self::$addonsdir . $ref['p'] . '/' . $ref['f'];\n		if(!file_exists($file)) {\n			log_error(sprintf('HookAPI: missing hook file while installing into hook %s (product: %s, function: %s, file: %s', $hook, $ref['p'], $ref['c'], $ref['f']));\n			return(false);\n		}\n		@include_once($file);\n		if(!is_callable($ref['c'])) {\n			log_error(sprintf('HookAPI: missing function while installing into hook %s (product: %s, function: %s, file: %s', $hook, $ref['p'], $ref['c'], $ref['f']));\n			return(false);\n		}\n		self::$hooks[$hook][] = array('p' => $product, 'f' => $file, 'c' => trim($function));\n		$change_array = array('integration_hooks' => serialize(self::$hooks));\n		updateSettings($change_array, true);\n		return(true);\n	}\n\n	// Process functions of an integration hook.\n	public static function callHook($hook, $parameters = array())\n	{\n		$results = array();\n\n		if(isset(self::$hooks[$hook]) && is_array(self::$hooks[$hook])) {\n			foreach(self::$hooks[$hook] as $current_hook) {\n				@include_once(self::$addonsdir . $current_hook['p'] . '/' . $current_hook['f']);\n				if(is_callable($current_hook['c']))\n					$results[$current_hook['c']] = call_user_func_array($current_hook['c'], $parameters);\n			}\n		}\n		return $results;\n	}\n\n	/*\n	 * special case - hooks that work on the output buffer - they\n	 * must be called via ob_start() and therefore need their own method.\n	 * \n	 * all functions registered under the integrate_buffer hook will run here\n	 */\n	public static function integrateOB()\n	{\n		if(isset(self::$hooks['integrate_buffer'])) {\n			foreach(self::$hooks['integrate_buffer'] as $current_hook) {\n				@include_once(self::$addonsdir . $current_hook['p'] . '/' . $current_hook['f']);\n				if(is_callable($current_hook['c']))\n					ob_start($current_hook['c']);\n			}\n		}\n	}\n\n	public static function removeHook($hook, $product, $file, $function)\n	{\n		$ref = array('p' => $product, 'f' => $file, 'c' => $function);\n\n		if(isset(self::$hooks[$hook]) && is_array(self::$hooks[$hook])) {\n			foreach(self::$hooks[$hook] as $key => $current_hook) {\n				if($current_hook == $ref) {\n					unset(self::$hooks[$hook][$key]);\n					if(0 == count(self::$hooks[$hook]))\n						unset(self::$hooks[$hook]);\n					$change_array = array('integration_hooks' => serialize(self::$hooks));\n					updateSettings($change_array, true);\n					return;\n				}\n			}\n		}\n	}\n\n	/**\n	 * @static\n	 * @param $product		string\n	 *\n	 * remove all hooks related to the product given in $product\n	 * product name is CASE SENSITIVE\n	 */\n	public static function removeAll($product)\n	{\n		$changed = false;\n\n		foreach(self::$hooks as $k => $hooks) {\n			foreach($hooks as $n => $hook) {\n				if($hook['p'] == $product) {\n					unset(self::$hooks[$k][$n]);\n					$changed = true;\n				}\n			}\n			if(0 == count(self::$hooks[$k]))\n				unset(self::$hooks[$k]);\n		}\n		if($changed) {\n			$change_array = array('integration_hooks' => serialize(self::$hooks));\n			updateSettings($change_array, true);\n		}\n	}\n}\n\nclass cacheAPI {\n\n	private static $API = -1;\n	private static $mcached_server;\n	private static $basekey = '';\n	private static $memcached = 0;\n	private static $cachedir = '';\n\n	private static $cache_hits = array();\n	private static $cache_count = 0;\n\n	private static $memcached_hosts = '';\n	/**\n	 * support for PECL new memcacheD\n	 */\n	private static function getMemcachedServer()\n	{\n		if (is_a(self::$mcached_server, 'Memcached'))\n			return self::$mcached_server;\n\n		$servers = explode(',', self::$memcached_hosts);\n		self::$mcached_server = new Memcached();\n		if (0 == count(self::$mcached_server->getServerList()) ) {\n			$h = array();\n			foreach($servers as $server) {\n				$server = explode( ':', trim($server));\n				$ip     = $server[0];\n				$port   = empty($server[1]) ? 11211 : $server[1];\n				$h[] = array($ip, $port);\n			}\n			self::$mcached_server->addServers($h);\n		}\n		return self::$mcached_server;\n	}\n\n	/**\n	 * @param int $level	caching level\n	 *\n	 * get server for the OLD memcache implementation\n	 */\n	private static function getMemcacheServer($level = 3)\n	{\n		global $modSettings, $db_persist;\n\n		$servers = explode(',', $modSettings['cache_memcached']);\n		$server = explode(':', trim($servers[array_rand($servers)]));\n\n		// Don't try more times than we have servers!\n		$level = min(count($servers), $level);\n\n		// Don't wait too long: yes, we want the server, but we might be able to run the query faster!\n		if (empty($db_persist))\n			self::$memcached = memcache_connect($server[0], empty($server[1]) ? 11211 : $server[1]);\n		else\n			self::$memcached = memcache_pconnect($server[0], empty($server[1]) ? 11211 : $server[1]);\n\n		if (!self::$memcached && $level > 0)\n			self::getMemcacheServer($level - 1);\n	}\n\n	public static function init($desired, $basekey, $memcached_hosts, $cachedir)\n	{\n		self::$basekey = $basekey;\n		self::$memcached_hosts = $memcached_hosts;\n		self::$cachedir = $cachedir;\n\n		if($desired == 'apc' && function_exists('apc_store'))\n		    self::$API = 1;\n		elseif($desired == 'xcache' && function_exists('xcache_get') && ini_get('xcache.var_size') > 0)\n			self::$API = 2;\n		elseif($desired == 'zend' && function_exists('output_cache_get'))\n			self::$API = 3;\n		elseif($desired == 'memcache' && function_exists('memcache_get'))\n			self::$API = 4;\n		elseif($desired == 'new_memcache' && class_exists('Memcached'))\n			self::$API = 5;\n		elseif($desired == 'file')\n			self::$API = 0;\n\n		// check for possible cache configuration errors\n		//if(((self::$API == 4 || self::$API == 5) && empty(self::$memcached_hosts)) || self::$API == -1)\n		//	log_error(sprintf('cacheInit: desired caching system unsupported or not available (desired = %s, memcached hosts = %s', $desired, self::$memcached_hosts));\n	}\n\n	public static function verifyFileCache()\n	{\n		global $user_info;\n\n		// if we have file caching, make absolutely sure the folder exists and is writeable\n		// if not, throw a warning (for admins only)\n		if(0 == self::$API && (empty(self::$cachedir) || !file_exists(self::$cachedir) || !is_writable(self::$cachedir) )) {\n			self::$API = -1;\n			loadLanguage('Errors');\n		}\n	}\n\n	public static function disable()\n	{\n		self::$API = -1;\n	}\n\n	public static function getEngine()\n	{\n		global $txt;\n		$engines = array('Filesystem cache', 'APC', 'Xcache', 'Zend', 'Memcached', 'New PECL Memcached');\n\n		if(-1 == self::$API)\n			return($txt['caching_disabled']);\n		else\n			return($engines[(int)self::$API]);\n	}\n\n	public static function getCache($key, $ttl = 120)\n	{\n		global $db_show_debug, $cachedir;\n\n		if(-1 == self::$API)\n			return(null);\n\n		self::$cache_count++;\n		if (isset($db_show_debug) && $db_show_debug === true) {\n			self::$cache_hits[self::$cache_count] = array('k' => $key, 'd' => 'get');\n			$st = microtime();\n		}\n\n		$key = self::$basekey . strtr($key, ':', '-');\n\n		switch(self::$API) {\n			case 5:\n				$key = str_replace(' ', '_', $key);\n\n				$instance = self::getMemcachedServer();\n				$value = $instance->get($key);\n				break;\n\n			case 4:\n				if (empty(self::$memcached))\n					self::getMemcacheServer();\n				if (!self::$memcached)\n					return;\n\n				$value = memcache_get(self::$memcached, $key);\n				break;\n\n			case 1:\n				$value = apc_fetch($key . 'smf');\n				break;\n\n			case 3:\n				$value = output_cache_get($key, $ttl);\n				break;\n\n			case 2:\n				$value = xcache_get($key);\n				break;\n\n			case 0:\n				if (file_exists($cachedir . '/data_' . $key . '.php') && filesize($cachedir . '/data_' . $key . '.php') > 10) {\n					require($cachedir . '/data_' . $key . '.php');\n					if (!empty($expired) && isset($value))\n					{\n						@unlink($cachedir . '/data_' . $key . '.php');\n						unset($value);\n					}\n				}\n				break;\n		}\n\n		if (isset($db_show_debug) && $db_show_debug === true) {\n			self::$cache_hits[self::$cache_count]['t'] = array_sum(explode(' ', microtime())) - array_sum(explode(' ', $st));\n			self::$cache_hits[self::$cache_count]['s'] = isset($value) ? strlen($value) : 0;\n		}\n\n		if (empty($value))\n			return null;\n		else\n			return @unserialize($value);\n	}\n\n	public static function putCache($key, $value, $ttl = 120)\n	{\n		global $db_show_debug, $cachedir;\n\n		if(-1 == self::$API)\n			return;\n\n		self::$cache_count++;\n		if (isset($db_show_debug) && $db_show_debug === true) {\n			self::$cache_hits[self::$cache_count] = array('k' => $key, 'd' => 'put', 's' => $value === null ? 0 : strlen(serialize($value)));\n			$st = microtime();\n		}\n\n		$key = self::$basekey . strtr($key, ':', '-');\n		$value = $value === null ? null : serialize($value);\n\n		switch(self::$API) {\n			case 5:\n				$key = str_replace(' ', '_', $key);\n				$instance = self::getMemcachedServer();\n				$instance->set($key, $value, $ttl);\n				break;\n\n			case 4:\n				if (empty(self::$memcached))\n					self::getMemcacheServer();\n				if (!self::$memcached)\n					return;\n\n				memcache_set(self::$memcached, $key, $value, 0, $ttl);\n				break;\n\n			case 1:\n				// An extended key is needed to counteract a bug in APC.\n				if ($value === null)\n					apc_delete($key . 'smf');\n				else\n					apc_store($key . 'smf', $value, $ttl);\n				break;\n\n			case 3:\n				output_cache_put($key, $value);\n				break;\n\n			case 2:\n				if ($value === null)\n					xcache_unset($key);\n				else\n					xcache_set($key, $value, $ttl);\n				break;\n\n			case 0:\n				if ($value === null)\n					@unlink($cachedir . '/data_' . $key . '.php');\n				else {\n					$cache_data = '<' . '?' . 'php if (!defined(\\'SMF\\')) die; if (' . (time() + $ttl) . ' < time()) $expired = true; else{$expired = false; $value = \\'' . addcslashes($value, '\\\\\\'') . '\\';}' . '?' . '>';\n					$fh = @fopen($cachedir . '/data_' . $key . '.php', 'w');\n					if ($fh)\n					{\n						// Write the file.\n						set_file_buffer($fh, 0);\n						flock($fh, LOCK_EX);\n						$cache_bytes = fwrite($fh, $cache_data);\n						flock($fh, LOCK_UN);\n						fclose($fh);\n\n						// Check that the cache write was successful; all the data should be written\n						// If it fails due to low diskspace, remove the cache file\n						if ($cache_bytes != strlen($cache_data))\n							@unlink($cachedir . '/data_' . $key . '.php');\n					}\n				}\n				break;\n		}\n		if (isset($db_show_debug) && $db_show_debug === true)\n			self::$cache_hits[self::$cache_count]['t'] = array_sum(explode(' ', microtime())) - array_sum(explode(' ', $st));\n	}\n}\n\n/**\n * Mobile Detect\n * @usage      require_once 'Mobile_Detect.php';\n *             $detect = new Mobile_Detect();\n *             $detect->isMobile() or $detect->isTablet()\n *\n *             For more specific usage see the documentation inside the class.\n *             $detect->isAndroidOS() or $detect->isiPhone() ...\n *\n * @license    http://www.opensource.org/licenses/mit-license.php The MIT License\n */\n\nclass Mobile_Detect {\n\n	protected $detectionRules;\n	protected $userAgent = null;\n	protected $accept = null;\n	// Assume the visitor has a desktop environment.\n	protected $isMobile = false;\n	protected $isTablet = false;\n	protected $phoneDeviceName = null;\n	protected $tabletDevicename = null;\n	protected $operatingSystemName = null;\n	protected $userAgentName = null;\n	// List of mobile devices (phones)\n	protected $phoneDevices = array(\n		'iPhone' => '(iPhone.*Mobile|iPod|iTunes)',\n		'BlackBerry' => 'BlackBerry|rim[0-9]+',\n		'HTC' => 'HTC|Desire',\n		'Nexus' => 'Nexus One|Nexus S',\n		'DellStreak' => 'Dell Streak',\n		'Motorola' => '\\bDroid\\b.*Build|HRI39|MOT\\-',\n		'Samsung' => 'Samsung|GT\\-P1000|SGH\\-T959D|GT\\-I9100|GT\\-I9000',\n		'Sony' => 'E10i',\n		'Asus' => 'Asus.*Galaxy',\n		'Palm' => 'PalmSource|Palm', // avantgo|blazer|elaine|hiptop|plucker|xiino\n		'GenericPhone' => '(mmp|pocket|psp|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|wap|nokia|Series40|Series60|S60|SonyEricsson|N900|\\bPPC\\b|MAUI.*WAP.*Browser|LG\\-P500)'\n	);\n	// List of tablet devices.\n	protected $tabletDevices = array(\n		'BlackBerryTablet' => 'PlayBook|RIM Tablet',\n		'iPad' => 'iPad.*Mobile',\n		'Kindle' => 'Kindle|Silk.*Accelerated',\n		'SamsungTablet' => 'SCH\\-I800|GT\\-P1000|Galaxy.*Tab',\n		'MotorolaTablet' => 'xoom|sholest',\n		'AsusTablet' => 'Transformer|TF101',\n		'GenericTablet' => 'Tablet|ViewPad7|LG\\-V909|MID7015|BNTV250A|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b',\n	);\n	// List of mobile Operating Systems.\n	protected $operatingSystems = array(\n		'AndroidOS' => '(android.*mobile|android(?!.*mobile))',\n		'BlackBerryOS' => '(blackberry|rim tablet os)',\n		'PalmOS' => '(avantgo|blazer|elaine|hiptop|palm|plucker|xiino)',\n		'SymbianOS' => 'Symbian|SymbOS|Series60|Series40|\\bS60\\b',\n		'WindowsMobileOS' => 'IEMobile|Windows Phone|Windows CE.*(PPC|Smartphone)|MSIEMobile|Window Mobile|XBLWP7',\n		'iOS' => '(iphone|ipod|ipad)',\n		'FlashLiteOS' => '',\n		'JavaOS' => '',\n		'NokiaOS' => '',\n		'webOS' => '',\n		'badaOS' => '\\bBada\\b',\n		'BREWOS' => '',\n	);\n	// List of mobile User Agents.\n	protected $userAgents = array(\n		'Chrome' => '\\bCrMo\\b',\n		'Dolfin' => '\\bDolfin\\b',\n		'Opera' => '(Opera.*Mini|Opera.*Mobi)',\n		'Skyfire' => 'skyfire',\n		'IE' => 'ie*mobile',\n		'Firefox' => 'fennec|firefox.*maemo',\n		'Bolt' => 'bolt',\n		'TeaShark' => 'teashark',\n		'Blazer' => 'Blazer',\n		'Safari' => 'Mobile*Safari',\n		'Midori' => 'midori',\n		'GenericBrowser' => 'NokiaBrowser|OviBrowser'\n	);\n\n	function __construct(){\n\n		// Merge all rules together.\n		$this->detectionRules = array_merge(\n			$this->phoneDevices,\n			$this->tabletDevices,\n			$this->operatingSystems,\n			$this->userAgents\n		);\n		$this->userAgent = $_SERVER['HTTP_USER_AGENT'];\n		$this->accept = isset($_SERVER['HTTP_ACCEPT']) ? $_SERVER['HTTP_ACCEPT'] : '';\n\n		if (\n			isset($_SERVER['HTTP_X_WAP_PROFILE']) ||\n			isset($_SERVER['HTTP_X_WAP_CLIENTID']) ||\n			isset($_SERVER['HTTP_WAP_CONNECTION']) ||\n			isset($_SERVER['HTTP_PROFILE']) ||\n			isset($_SERVER['HTTP_X_OPERAMINI_PHONE_UA']) || // Reported by Nokia devices (eg. C3)\n			isset($_SERVER['HTTP_X_NOKIA_IPADDRESS']) ||\n			isset($_SERVER['HTTP_X_NOKIA_GATEWAY_ID']) ||\n			isset($_SERVER['HTTP_X_ORANGE_ID']) ||\n			isset($_SERVER['HTTP_X_VODAFONE_3GPDPCONTEXT']) ||\n			isset($_SERVER['HTTP_X_HUAWEI_USERID']) ||\n			isset($_SERVER['HTTP_UA_OS']) || // Reported by Windows Smartphones\n			(isset($_SERVER['HTTP_UA_CPU']) && $_SERVER['HTTP_UA_CPU'] == 'ARM') // Seen this on a HTC\n		) {\n			$this->isMobile = true;\n		} elseif (!empty($this->accept) && (strpos($this->accept, 'text/vnd.wap.wml') !== false || strpos($this->accept, 'application/vnd.wap.xhtml+xml') !== false)) {\n			$this->isMobile = true;\n		} else {\n			$this->_detect();\n		}\n\n	}\n\n	public function getRules()\n	{\n		return $this->detectionRules;\n	}\n\n	public function __call($name, $arguments)\n	{\n\n		$key = substr($name, 2);\n		return $this->_detect($key);\n\n	}\n\n	private function _detect($key='')\n	{\n\n		if(empty($key)){\n\n			// Begin general search.\n			foreach($this->detectionRules as $_key => $_regex){\n				if(empty($_regex)){ continue; }\n				if(preg_match('/'.$_regex.'/is', $this->userAgent)){\n					$this->isMobile = true;\n					return true;\n				}\n			}\n			return false;\n\n		} else {\n\n			// Search for a certain key.\n			// Make the keys lowecase so we can match: isIphone(), isiPhone(), isiphone(), etc.\n			$key = strtolower($key);\n			$_rules = array_change_key_case($this->detectionRules);\n\n			if(array_key_exists($key, $_rules)){\n				if(empty($_rules[$key])){ return null; }\n				if(preg_match('/'.$_rules[$key].'/is', $this->userAgent)){\n					$this->isMobile = true;\n					return true;\n				} else {\n					return false;\n				}\n			} else {\n				trigger_error(\"Method $key is not defined\", E_USER_WARNING);\n			}\n\n			return false;\n\n		}\n\n	}\n\n	/**\n	 * Returns true if any type of mobile device detected, including special ones\n	 * @return bool\n	 */\n	public function isMobile()\n	{\n		return $this->isMobile;\n	}\n\n	/**\n	 * Return true if any type of tablet device is detected.\n	 * @return boolean\n	 */\n	public function isTablet()\n	{\n\n		foreach($this->tabletDevices as $_key => $_regex){\n			if(preg_match('/'.$_regex.'/is', $this->userAgent)){\n				$this->isTablet = true;\n				return true;\n			}\n		}\n\n		return false;\n\n	}\n\n\n}\n\nclass Topiclist {\n\n	private $topiclist = array();\n	private $users_to_load = array();\n	private $topic_ids = array();\n\n	function __construct($request, $total_items) {\n\n		global $context, $txt, $user_info, $scripturl, $options, $memberContext, $modSettings;\n\n		while ($row = mysql_fetch_assoc($request))\n		{\n			censorText($row['subject']);\n\n			$this->topic_ids[] = $row['id_topic'];\n\n			$f_post_mem_href = !empty($row['id_member']) ? URL::user($row['id_member'], $row['first_member_name']) : '';\n			$t_href = URL::topic($row['id_topic'], $row['subject'], 0);\n\n			$l_post_mem_href = !empty($row['id_member_updated']) ? URL::user($row['id_member_updated'], $row['last_real_name'] ) : '';\n			$l_post_msg_href = URL::topic($row['id_topic'], $row['last_subject'], $user_info['is_guest'] ? (!empty($options['view_newest_first']) ? 0 : ((int) (($row['num_replies']) / $context['pageindex_multiplier'])) * $context['pageindex_multiplier']) : 0, $user_info['is_guest'] ? true : false, $user_info['is_guest'] ? '' : ('.msg' . $row['id_last_msg']), $user_info['is_guest'] ? ('#msg' . $row['id_last_msg']) : '#new');\n\n			$this->topiclist[$row['id_topic']] = array(\n				'id' => $row['id_topic'],\n				'id_member_started' => empty($row['id_member']) ? 0 : $row['id_member'],\n				'first_post' => array(\n					'id' => $row['id_first_msg'],\n					'member' => array(\n						'username' => $row['first_member_name'],\n						'name' => $row['first_member_name'],\n						'id' => empty($row['id_member']) ? 0 : $row['id_member'],\n						'href' => $f_post_mem_href,\n						'link' => !empty($row['id_member']) ? '<a onclick=\"getMcard('.$row['id_member'].', $(this));return(false);\" href=\"' . $f_post_mem_href . '\" title=\"' . $txt['profile_of'] . ' ' . $row['first_member_name'] . '\">' . $row['first_member_name'] . '</a>' : $row['first_member_name'],\n					),\n					'time' => timeformat($row['first_poster_time']),\n					'timestamp' => forum_time(true, $row['first_poster_time']),\n					'subject' => $row['subject'],\n					'icon' => $row['first_icon'],\n					'icon_url' => getPostIcon($row['first_icon']),\n					'href' => $t_href,\n					'link' => '<a href=\"' . $t_href .'\">' . $row['subject'] . '</a>'\n				),\n				'last_post' => array(\n					'id' => $row['id_last_msg'],\n					'member' => array(\n						'username' => $row['last_real_name'],\n						'name' => $row['last_real_name'],\n						'id' => $row['id_member_updated'],\n						'href' => $l_post_mem_href,\n						'link' => !empty($row['id_member_updated']) ? '<a onclick=\"getMcard('.$row['id_member_updated'].', $(this));return(false);\" href=\"' . $l_post_mem_href . '\">' . $row['last_real_name'] . '</a>' : $row['last_real_name']\n					),\n					'time' => timeformat($row['last_post_time']),\n					'timestamp' => forum_time(true, $row['last_post_time']),\n					'subject' => $row['last_subject'],\n					'href' => $l_post_msg_href,\n					'link' => '<a href=\"' . $l_post_msg_href . ($row['num_replies'] == 0 ? '' : ' rel=\"nofollow\"') . '>' . $row['last_subject'] . '</a>'\n				),\n				'subject' => $row['subject'],\n				'new' => $row['new_from'] <= $row['id_msg_modified'],\n				'new_from' => $row['new_from'],\n				'newtime' => $row['new_from'],\n				'updated' => timeformat($row['poster_time']),\n				'new_href' => $scripturl . '?topic=' . $row['id_topic'] . '.msg' . $row['new_from'] . '#new',\n				'new_link' => '<a href=\"' . $scripturl . '?topic=' . $row['id_topic'] . '.msg' . $row['new_from'] . '#new\">' . $row['subject'] . '</a>',\n				'replies' => comma_format($row['num_replies']),\n				'views' => comma_format($row['num_views']),\n				'approved' => $row['approved'],\n				'unapproved_posts' => $row['unapproved_posts'],\n				'is_old' => !empty($modSettings['oldTopicDays']) ? (($context['time_now'] - $row['last_post_time']) > ($modSettings['oldTopicDays'] * 86400)) : false,\n				'is_posted_in' => false,\n				'prefix' => '',\n				'pages' => '',\n				'is_sticky' => !empty($modSettings['enableStickyTopics']) && !empty($row['is_sticky']),\n				'is_locked' => !empty($row['locked']),\n				'is_poll' => false,\n				'is_hot' => $row['num_replies'] >= $modSettings['hotTopicPosts'],\n				'is_very_hot' => $row['num_replies'] >= $modSettings['hotTopicVeryPosts'],\n				'board' => isset($row['id_board']) && !empty($row['id_board']) ? array(\n					'name' => $row['board_name'],\n					'id' => $row['id_board'],\n					'href' => URL::board($row['id_board'], $row['board_name'])\n				) : array(\n					'name' => '',\n					'id' => 0,\n					'href' => ''\n				)\n			);\n			//determineTopicClass($this->topiclist[$row['id_topic']]);\n			if(!empty($row['id_member']) && $row['id_member'] != $user_info['id'])\n				$this->users_to_load[$row['id_member']] = $row['id_member'];\n		}\n		loadMemberData($this->users_to_load);\n		foreach($this->topiclist as &$topic) {\n			if(!isset($memberContext[$topic['id_member_started']]))\n				loadMemberContext($topic['id_member_started']);\n			$topic['first_post']['member']['avatar'] = &$memberContext[$topic['id_member_started']]['avatar']['image'];\n		}\n\n		// figure out whether we have posted in a topic (but only if we are not the topic starter)\n		if (!empty($modSettings['enableParticipation']) && !$user_info['is_guest'] && !empty($this->topic_ids))\n		{\n			$result = smf_db_query( '\n				SELECT id_topic\n				FROM {db_prefix}messages\n				WHERE id_topic IN ({array_int:topic_list})\n					AND id_member = {int:current_member}\n				GROUP BY id_topic\n				LIMIT ' . count($this->topic_ids),\n				array(\n					'current_member' => $user_info['id'],\n					'topic_list' => $this->topic_ids,\n				)\n			);\n			while ($row = mysql_fetch_assoc($result)) {\n				if($this->topiclist[$row['id_topic']]['first_post']['member']['id'] != $user_info['id'])\n					$this->topiclist[$row['id_topic']]['is_posted_in'] = true;\n			}\n			mysql_free_result($result);\n		}\n	}\n\n	public function &getResult() {\n		return $this->topiclist;\n	}\n}\n?>\n",
			"file": "Sources/CommonAPI.php",
			"file_size": 28350,
			"file_write_time": 129835432221158000,
			"settings":
			{
				"buffer_size": 28350,
				"line_ending": "Unix"
			}
		},
		{
			"file": "subscriptions.php",
			"settings":
			{
				"buffer_size": 8677,
				"line_ending": "Windows"
			}
		},
		{
			"file": "license.txt",
			"settings":
			{
				"buffer_size": 1611,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 375.0,
		"selected_items":
		[
			[
				"pack",
				"Package Control: List Packages"
			],
			[
				"swi",
				"Switch language: en_GB"
			],
			[
				"swit",
				"Switch language: en_US"
			],
			[
				"switch",
				"Switch language: en_GB"
			],
			[
				"Swit",
				"Switch language: de_DE_igerman98"
			],
			[
				"upd",
				"Update Languages"
			],
			[
				"up",
				"Update Languages"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Disable Package"
			],
			[
				"git st",
				"Git: Status"
			],
			[
				"git stat",
				"Git: Status"
			],
			[
				"git s",
				"Git: Status"
			],
			[
				"git commit",
				"Git: Commit"
			],
			[
				"git",
				"Git: Commit"
			],
			[
				"git pul",
				"Git: Pull"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git sta",
				"Git: Status"
			],
			[
				"pak",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"",
				"About"
			]
		],
		"width": 522.0
	},
	"console":
	{
		"height": 131.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/alex/Dropbox/smf/mysql-connector-license.txt",
		"/C/Users/alex/Dropbox/smf/sftp-config.json",
		"/C/Users/alex/Dropbox/smf/Settings.php",
		"/C/Users/alex/Dropbox/smf/SSI.php",
		"/C/Users/alex/Dropbox/smf/install.php",
		"/C/Users/alex/Dropbox/smf/readme.html",
		"/C/tabsrmm/trunk/miranda/plugins/tabsrmm/src/contactcache.cpp",
		"/C/Users/alex/Dropbox/sublime/Data/Packages/Color Scheme - Default/Solarized (Dark).tmTheme",
		"/C/Users/alex/Dropbox/sublime/Data/Packages/Color Scheme - Default/MySolarized.tmTheme",
		"/C/Users/alex/Dropbox/smf/smf.sublime-project",
		"/C/Users/alex/Dropbox/smf/.gitignore",
		"/C/Users/alex/Dropbox/sublime/Data/Packages/Default/Preferences.sublime-settings",
		"/C/Users/alex/Dropbox/sublime/Data/Packages/User/Preferences.sublime-settings",
		"/C/Users/alex/Dropbox/sublime/Data/Packages/Theme - Soda/Soda Dark.sublime-theme",
		"/C/Users/alex/Dropbox/smf/Sources/lib/Twig/lib/Twig/Loader/String.php",
		"/C/Users/alex/Dropbox/sublime/Data/Packages/Color Scheme - Default/Espresso Libre.tmTheme",
		"/C/Users/alex/Dropbox/sublime/Data/Packages/Color Scheme - Default/Twilight.tmTheme",
		"/C/Users/alex/Dropbox/smf/index.php",
		"/C/Users/alex/Dropbox/sublime/Data/Packages/Color Scheme - Default/Solarized (Light).tmTheme",
		"/C/Users/alex/Dropbox/sublime/Data/Packages/Color Scheme - Default/Solarized (Light).tmTheme.cache",
		"/C/Users/alex/Documents/1.xspf",
		"/C/Users/alex/Dropbox/sublime/Data/Packages/PHP/PHP.tmLanguage",
		"/C/Users/alex/Dropbox/smf/eos_upgrade.php",
		"/C/Users/alex/Dropbox/sublime/Data/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/alex/Documents/1.html",
		"/C/Users/alex/Dropbox/sublime/Data/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/alex/Dropbox/smf/Themes/default/RelatedTopicsAdmin.template.php",
		"/C/Users/alex/Dropbox/smf/Sources/PackageGet.php",
		"/C/Users/alex/Dropbox/smf/.idea/projectCodeStyle.xml",
		"/C/Users/alex/Dropbox/smf/.idea/modules.xml",
		"/C/Users/alex/Dropbox/Backups/Zimbra/skins_fonts_hack/base/skin.properties",
		"/C/Users/alex/Dropbox/smf/.idea/dataSources.xml",
		"/C/Users/alex/Dropbox/smf/Themes/admin/admin.js",
		"/C/Users/alex/.cream/creamrc",
		"/C/Users/alex/.cream/_vimrc",
		"/C/Users/alex/Dropbox/sublime/sublime_plugin.py",
		"/C/Program Files (x86)/Zimbra/Zimbra Desktop/jetty/webapps/zimbra/skins/carbon/skin.properties",
		"/C/Program Files (x86)/Zimbra/Zimbra Desktop/jetty/webapps/zimbra/skins/_base/base2/skin.properties",
		"/C/Program Files (x86)/Zimbra/Zimbra Desktop/jetty/webapps/zimbra/skins/_base/base/skin.properties",
		"/C/Users/alex/Dropbox/desktop.ini",
		"/C/Users/alex/Dropbox/Backups/Zimbra/skins_fonts_hack/base/skin.css",
		"/C/Users/alex/Dropbox/potplayer/2.reg",
		"/C/Users/alex/Dropbox/smf/Themes/default/languages/index.english.php",
		"/C/Users/alex/Dropbox/smf/Sources/lib/Subs-BoardIndex.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/BoardIndex.template.php",
		"/C/Users/alex/Dropbox/smf/Sources/MessageIndex.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/MessageIndex.template.php",
		"/C/TEMP/_tc/ipv6.xml",
		"/C/Users/alex/AppData/Roaming/Thunderbird/Profiles/wypm2qr3.default/chrome/userContent.css",
		"/D/tbird/userContent.css",
		"/M/backups/___",
		"/M/pw.txt",
		"/C/Users/alex/Documents/linda23/g8z5t5hwt.htm",
		"/C/Users/alex/Dropbox/potplayer/1.reg",
		"/C/Users/alex/Dropbox/smf/Sources/backend/ManageNews.php",
		"/C/Users/alex/Dropbox/smf/Sources/Load.php",
		"/C/Users/alex/Dropbox/smf/Sources/Display.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/Display.template.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/Profile.template.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/GenericBits.template.php",
		"/C/Users/alex/Dropbox/smf/Sources/lib/Subs-Db-mysql.php",
		"/C/tabsrmm/trunk/miranda/plugins/tabsrmm/src/globals.cpp",
		"/C/Users/alex/Dropbox/smf/Sources/Subs.php",
		"/C/Users/alex/Dropbox/smf/Sources/Security.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/index.template.php",
		"/C/Users/alex/Dropbox/smf/Themes/admin/index.template.php",
		"/C/tabsrmm/trunk/miranda/plugins/tabsrmm/src/infopanel.cpp",
		"/C/TEMP/_tc/infopanel.cpp",
		"/C/TEMP/_tc/modern_statusbar_options.cpp",
		"/C/tabsrmm/trunk/miranda/plugins/tabsrmm/chat/muchighlight.cpp",
		"/E/sublime/Data/Packages/Default/Preferences.sublime-settings",
		"/E/sublime/Data/Packages/User/Preferences.sublime-settings",
		"/C/Users/alex/Dropbox/smf/related_topics.php",
		"/C/Users/alex/Dropbox/smf/table-changes.sql",
		"/C/Users/alex/Dropbox/smf/news_readme.html",
		"/C/Users/alex/Dropbox/smf/Themes/default/css/index.css",
		"/E/sublime/Data/Packages/User/Git.sublime-settings",
		"/C/Users/alex/Dropbox/smf/Sources/Activities.php",
		"/C/Users/alex/Dropbox/smf/Sources/Admin.php",
		"/C/Users/alex/Dropbox/smf/agreement.txt",
		"/C/Users/alex/Dropbox/smf/Themes/default/help/loginout.english.html",
		"/C/Users/alex/Dropbox/smf/Themes/default/scripts/script.js",
		"/C/Users/alex/Dropbox/smf/Sources/QueryString.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/scripts/footer.js",
		"/C/Users/alex/Dropbox/smf/Themes/default/scripts/topic.js",
		"/C/Users/alex/Dropbox/smf/Sources/ScheduledTasks.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/Postbit.template.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/help/index.english.html",
		"/C/Users/alex/Dropbox/smf/Sources/Recent.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/index.php",
		"/E/sublime/Data/Packages/SFTP/SFTP.py",
		"/E/sublime/Data/Packages/SFTP/messages/1.7.0.txt",
		"/E/sublime/Data/Packages/SFTP/messages.json",
		"/E/sublime/Data/Packages/SFTP/messages/1.9.0.txt",
		"/E/sublime/Data/Packages/User/Default (Windows).sublime-keymap",
		"/E/sublime/Data/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/alex/Dropbox/smf/Sources/Profile-Modify.php",
		"/E/sublime/Data/Packages/CTags/Default.sublime-keymap",
		"/E/sublime/Data/Packages/CTags/CTags.sublime-settings",
		"/C/Users/alex/Dropbox/smf/Sources/LikeSystem.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/Help.template.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/LikeSystem.template.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/GenericMenu.template.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/GenericList.template.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/GenericControls.template.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/Activities.template.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/Admin.template.php",
		"/C/Users/alex/Dropbox/smf/Sources/CommonAPI.php",
		"/C/Users/alex/Dropbox/smf/Themes/default/News.template.php",
		"/C/Users/alex/Dropbox/smf/.tags_sorted_by_file",
		"/C/Users/alex/Dropbox/smf/Sources/Calendar.php",
		"/E/sublime/Data/Packages/SFTP/Default (Windows).sublime-keymap",
		"/E/sublime/Data/Packages/SublimeCodeIntel/Base File.sublime-settings",
		"/E/sublime/Data/Packages/User/Base File.sublime-settings",
		"/E/sublime/Data/Packages/SublimeCodeIntel/Default (Windows).sublime-keymap",
		"/E/sublime/Data/Packages/User/SFTP.sublime-settings",
		"/E/sublime/Data/Packages/SFTP/SFTP.sublime-settings",
		"/C/Users/alex/Dropbox/smf/.project",
		"/C/Users/alex/Dropbox/smf/.htaccess",
		"/E/sublime/Data/Packages/Color Scheme - Default/Espresso Libre.tmTheme",
		"/E/sublime/Data/Packages/C++/C++.tmLanguage",
		"/E/sublime/Data/Packages/User/XML.sublime-settings",
		"/E/sublime/Pristine Packages/PHP.sublime-package",
		"/E/sublime/Data/Packages/Edit History/Edit History.sublime-settings",
		"/E/sublime/Data/Packages/User/Edit History.sublime-settings",
		"/C/Users/alex/Dropbox/smf/Themes/default/Calendar.template.php",
		"/E/sublime/Data/Settings/Session.sublime_session",
		"/C/idea/build.txt"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"openid_restore_post",
			"desired",
			"function_exists",
			"loadlang",
			"CContactCache",
			"555555",
			"string",
			"spell",
			"this",
			"m_szProto",
			"reinterpret_cast",
			"initPhaseTwo",
			"spell",
			"highlight",
			"php:",
			"bra",
			"bracke",
			"cplus",
			"php",
			"caret",
			"num_",
			"key",
			"font",
			"potplayermini",
			"child",
			"ignore",
			"this",
			"parameters",
			"quoted",
			"'url'",
			"groups",
			"font-options",
			"font",
			"complete",
			"caret",
			"box-sizing",
			"settings",
			"smalltext",
			" *",
			"intralink",
			";",
			"cookiename",
			");",
			"manageavatar",
			"caret",
			"index.template.php",
			"detect",
			"slow",
			"caret",
			"num"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"PotPlayerMini64"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "index.php",
					"settings":
					{
						"buffer_size": 13834,
						"regions":
						{
						},
						"selection":
						[
							[
								3893,
								3893
							]
						],
						"settings":
						{
							"buffer_scroll_name": "70ba3500",
							"remote_loading": false,
							"spell_check": false,
							"synced": false,
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1657.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/alex/Dropbox/sublime/Data/Packages/User/Preferences.sublime-settings",
					"settings":
					{
						"buffer_size": 235,
						"regions":
						{
						},
						"selection":
						[
							[
								217,
								217
							]
						],
						"settings":
						{
							"buffer_scroll_name": "07adbf4d",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Sources/Load.php",
					"settings":
					{
						"buffer_size": 110702,
						"regions":
						{
						},
						"selection":
						[
							[
								32653,
								32661
							]
						],
						"settings":
						{
							"buffer_scroll_name": "16e9ce2e",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 12441.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Sources/lib/Subs.php",
					"settings":
					{
						"buffer_size": 152574,
						"regions":
						{
						},
						"selection":
						[
							[
								117987,
								117987
							]
						],
						"settings":
						{
							"buffer_scroll_name": "db6e548d",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 52097.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Sources/CommonAPI.php",
					"settings":
					{
						"buffer_size": 28350,
						"regions":
						{
						},
						"selection":
						[
							[
								11537,
								11537
							]
						],
						"settings":
						{
							"buffer_scroll_name": "31bb7ab6",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5473.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "subscriptions.php",
					"settings":
					{
						"buffer_size": 8677,
						"regions":
						{
						},
						"selection":
						[
							[
								514,
								514
							]
						],
						"settings":
						{
							"buffer_scroll_name": "030101d8",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "license.txt",
					"settings":
					{
						"buffer_size": 1611,
						"regions":
						{
						},
						"selection":
						[
							[
								204,
								204
							]
						],
						"settings":
						{
							"buffer_scroll_name": "5e1597a9",
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.sftp":
	{
		"height": 98.0
	},
	"replace":
	{
		"height": 60.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"subs.",
				"Sources/lib/Subs.php"
			],
			[
				"load.",
				"Sources/Load.php"
			],
			[
				"load",
				"Sources/lib/Twig/lib/Twig/Loader/String.php"
			],
			[
				"loadmem",
				"Themes/default/RelatedTopicsAdmin.template.php"
			],
			[
				"pack",
				"Sources/PackageGet.php"
			],
			[
				"secu",
				"Sources/Security.php"
			],
			[
				"index.css",
				"Themes/default/css/index.css"
			],
			[
				"footer.js",
				"Themes/default/scripts/footer.js"
			],
			[
				"index.template",
				"Themes/default/index.template.php"
			],
			[
				"index.english",
				"Themes/default/languages/index.english.php"
			],
			[
				"index.eng",
				"Themes/default/help/index.english.html"
			],
			[
				"postbit",
				"Themes/default/Postbit.template.php"
			],
			[
				"display.t",
				"Themes/default/Display.template.php"
			],
			[
				"displa",
				"Sources/Display.php"
			],
			[
				"index.t",
				"Themes/default/index.template.php"
			],
			[
				"index.e",
				"Themes/default/languages/index.english.php"
			],
			[
				"like",
				"Sources/LikeSystem.php"
			],
			[
				"script.js",
				"Themes/default/scripts/script.js"
			],
			[
				"display.te",
				"Themes/default/Display.template.php"
			],
			[
				"",
				".htaccess"
			],
			[
				"footer.",
				"Themes/default/scripts/footer.js"
			],
			[
				"index.tm",
				"Themes/default/index.template.php"
			],
			[
				"admin",
				"Sources/Admin.php"
			],
			[
				"displ",
				"Sources/Display.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 241.0,
	"status_bar_visible": true
}
